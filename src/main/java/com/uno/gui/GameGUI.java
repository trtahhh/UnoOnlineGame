package com.uno.gui;

import com.uno.client.UnoClientMain;
import com.uno.model.Card;
import com.uno.model.CardColor;
import com.uno.model.CardType;
import com.uno.server.GameRoom.GameState;
import com.uno.server.GameRoom.PlayerInfo;
import com.uno.utils.StringUtils;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.plaf.basic.BasicScrollBarUI;

/**
 * Giao di·ªán game Uno
 */
public class GameGUI extends JFrame {
    private final UnoClientMain clientMain;
    private final String playerId;
    
    private JPanel gamePanel;
    private JPanel topCardPanel;
    private JPanel playerHandPanel;
    private List<JPanel> otherPlayerPanels;
    private JLabel topCardLabel;
    private JLabel currentPlayerLabel;
    private JLabel directionLabel;
    private JButton drawCardButton;
    private JButton endTurnButton;
    private JButton unoButton;
    private JTextArea chatArea;
    private JTextField chatField;
    private JButton sendButton;
    
    private boolean canPlay;
    private Card topCard;
    private List<Card> playerHand;
    
    public GameGUI(UnoClientMain clientMain, String playerId) {
        this.clientMain = clientMain;
        // ƒê·∫£m b·∫£o playerId kh√¥ng null v√† ƒë∆∞·ª£c trim
        this.playerId = (playerId != null) ? playerId.trim() : "";
        
        // Debug ID c·ªßa ng∆∞·ªùi ch∆°i
        System.out.println("GameGUI constructor: Nh·∫≠n playerId = '" + playerId + "', sau khi trim: '" + this.playerId + "'");
        
        this.canPlay = false;
        this.playerHand = new ArrayList<>();
        
        initComponents();
        setupListeners();
        
        setTitle("üÉè UNO ONLINE - GAME");
        // K√≠ch th∆∞·ªõc c·ª≠a s·ªï theo thi·∫øt k·∫ø
        setSize(1200, 800);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        
        // M√†u n·ªÅn theo thi·∫øt k·∫ø
        getContentPane().setBackground(new Color(248, 249, 250)); // Light gray
        
        // Khi ƒë√≥ng c·ª≠a s·ªï, ƒë·∫£m b·∫£o th√¥ng b√°o cho server
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                int option = JOptionPane.showConfirmDialog(
                    GameGUI.this,
                    "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t kh·ªèi game?",
                    "X√°c nh·∫≠n tho√°t",
                    JOptionPane.YES_NO_OPTION
                );
                
                if (option == JOptionPane.YES_OPTION) {
                    clientMain.leaveRoom();
                    dispose();
                }
            }
        });
    }
    
    /**
     * Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn UI
     */
    private void initComponents() {
        setLayout(new BorderLayout());
        
        // Clean main panel
        gamePanel = new JPanel(new BorderLayout());
        gamePanel.setBackground(new Color(248, 249, 250)); // Light gray
        
                // Panel th√¥ng tin ·ªü tr√™n v·ªõi thi·∫øt k·∫ø hi·ªán ƒë·∫°i
        JPanel infoPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 30, 15));
        infoPanel.setBackground(new Color(250, 250, 250));
        
        // T·∫°o gradient nh·∫π cho panel
        infoPanel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createMatteBorder(0, 0, 3, 0, new Color(52, 152, 219)), // UNO Blue
            BorderFactory.createEmptyBorder(10, 10, 10, 10)
        ));
        
        currentPlayerLabel = new JLabel("Current Turn: ");
        currentPlayerLabel.setFont(new Font("Arial", Font.BOLD, 16));
        currentPlayerLabel.setForeground(new Color(73, 80, 87));
        
        // Clean separator
        JLabel separator = new JLabel(" ‚Ä¢ ");
        separator.setFont(new Font("Arial", Font.BOLD, 16));
        separator.setForeground(new Color(173, 181, 189));
        
        directionLabel = new JLabel("Direction: ‚Üí");
        directionLabel.setFont(new Font("Arial", Font.BOLD, 14));
        directionLabel.setForeground(new Color(73, 80, 87));
        
        infoPanel.add(currentPlayerLabel);
        infoPanel.add(separator);
        infoPanel.add(directionLabel);
        
        // Center pile layout theo thi·∫øt k·∫ø m·ªõi hi·ªán ƒë·∫°i h∆°n
        topCardPanel = new JPanel();
        topCardPanel.setLayout(new BoxLayout(topCardPanel, BoxLayout.Y_AXIS));
        
        // N·ªÅn gradient nh·∫π
        topCardPanel.setBackground(new Color(250, 250, 250));
        topCardPanel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createMatteBorder(0, 0, 0, 0, new Color(90, 95, 207, 30)),
            BorderFactory.createEmptyBorder(40, 50, 40, 50)
        ));
        
        // Label cho l√° b√†i ·ªü gi·ªØa v·ªõi thi·∫øt k·∫ø hi·ªán ƒë·∫°i
        JPanel topCardHeaderPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        topCardHeaderPanel.setBackground(new Color(250, 250, 250));
        topCardHeaderPanel.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        // S·ª≠ d·ª•ng panel thay v√¨ label ƒë·ªÉ t·∫°o header ƒë·∫πp h∆°n
        JPanel headerLabelPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        headerLabelPanel.setBackground(new Color(90, 95, 207));
        headerLabelPanel.setBorder(BorderFactory.createEmptyBorder(8, 15, 8, 15));
        
        JLabel currentCardLabel = new JLabel("üé¥ L√Å B√ÄI ƒêANG CH∆†I");
        currentCardLabel.setFont(new Font("Arial", Font.BOLD, 16));
        currentCardLabel.setForeground(Color.WHITE);
        
        headerLabelPanel.add(currentCardLabel);
        topCardHeaderPanel.add(headerLabelPanel);
        
        // T·∫°o panel ch·ª©a l√° b√†i v·ªõi hi·ªáu ·ª©ng 3D v√† b√≥ng ƒë·ªï
        JPanel topCardContainer = new JPanel(new BorderLayout()) {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g.create();
                
                // V·∫Ω ƒë·ªï b√≥ng nh·∫π
                g2d.setColor(new Color(0, 0, 0, 20));
                g2d.fillRoundRect(5, 5, getWidth() - 8, getHeight() - 8, 15, 15);
                
                g2d.dispose();
            }
        };
        
        topCardContainer.setBackground(new Color(250, 250, 250));
        topCardContainer.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createEmptyBorder(15, 15, 15, 15),
            BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(90, 95, 207, 100), 2, true),
                BorderFactory.createEmptyBorder(10, 10, 10, 10)
            )
        ));
        topCardContainer.setAlignmentX(Component.CENTER_ALIGNMENT);
        topCardContainer.setMaximumSize(new Dimension(180, 240));
        
        // Label l√° b√†i v·ªõi hi·ªáu ·ª©ng n·ªïi
        topCardLabel = new JLabel("No Card") {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2d = (Graphics2D) g.create();
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                
                // V·∫Ω vi·ªÅn s√°ng
                g2d.setColor(new Color(255, 255, 255, 200));
                g2d.fillRoundRect(0, 0, getWidth(), getHeight(), 15, 15);
                
                // V·∫Ω hi·ªáu ·ª©ng 3D
                g2d.setColor(new Color(200, 200, 200, 100));
                g2d.fillRoundRect(5, 5, getWidth() - 10, getHeight() - 10, 10, 10);
                
                g2d.dispose();
                super.paintComponent(g);
            }
        };
        
        topCardLabel.setPreferredSize(new Dimension(140, 200));
        topCardLabel.setMaximumSize(new Dimension(140, 200));
        topCardLabel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(90, 95, 207, 50), 2),
            BorderFactory.createEmptyBorder(5, 5, 5, 5)
        ));
        topCardLabel.setOpaque(false);
        topCardLabel.setHorizontalAlignment(SwingConstants.CENTER);
        topCardLabel.setVerticalAlignment(SwingConstants.CENTER);
        topCardLabel.setFont(new Font("Arial", Font.BOLD, 18));
        topCardLabel.setForeground(new Color(90, 95, 207));
        
        topCardContainer.add(topCardLabel, BorderLayout.CENTER);
        
        topCardPanel.add(Box.createVerticalGlue());
        topCardPanel.add(topCardHeaderPanel);
        topCardPanel.add(Box.createVerticalStrut(10));
        topCardPanel.add(topCardContainer);
        topCardPanel.add(Box.createVerticalGlue());
        
        // Clean other players panel
        JPanel otherPlayersPanel = new JPanel();
        otherPlayersPanel.setLayout(new BoxLayout(otherPlayersPanel, BoxLayout.Y_AXIS));
        otherPlayersPanel.setBackground(new Color(248, 249, 250));
        otherPlayersPanel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createTitledBorder(
                BorderFactory.createMatteBorder(0, 0, 0, 1, new Color(222, 226, 230)),
                "NG∆Ø·ªúI CH∆†I KH√ÅC",
                0, 0,
                new Font("Arial", Font.BOLD, 14),
                new Color(90, 95, 207) // UI Accent color
            ),
            BorderFactory.createEmptyBorder(15, 15, 15, 15)
        ));
        otherPlayersPanel.setPreferredSize(new Dimension(220, 0));
        
        otherPlayerPanels = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            // Thi·∫øt k·∫ø theo layout m·∫´u cho khu v·ª±c other players - c·∫£i ti·∫øn theo h√¨nh ·∫£nh
            JPanel playerPanel = new JPanel();
            playerPanel.setLayout(new BoxLayout(playerPanel, BoxLayout.Y_AXIS));
            playerPanel.setBackground(new Color(248, 249, 250));
            
            // Border v·ªõi hi·ªáu ·ª©ng ƒë·ªï b√≥ng nh·∫π
            playerPanel.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(233, 236, 239), 1),
                BorderFactory.createEmptyBorder(12, 12, 12, 12)
            ));
            playerPanel.setMaximumSize(new Dimension(200, 120));
            
            // Panel cho t√™n ng∆∞·ªùi ch∆°i v·ªõi gradient
            JPanel namePanel = new JPanel(new BorderLayout());
            namePanel.setBackground(new Color(90, 95, 207)); // UI Accent
            namePanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
            namePanel.setMaximumSize(new Dimension(200, 35));
            namePanel.setPreferredSize(new Dimension(200, 35));
            
            JLabel nameLabel = new JLabel("Player " + (i + 1));
            nameLabel.setFont(new Font("Arial", Font.BOLD, 14));
            nameLabel.setHorizontalAlignment(SwingConstants.CENTER);
            nameLabel.setForeground(Color.WHITE);
            namePanel.add(nameLabel, BorderLayout.CENTER);
            
            // Th√™m bi·ªÉu t∆∞·ª£ng ng∆∞·ªùi ch∆°i
            JLabel playerIcon = new JLabel("üë§");
            playerIcon.setFont(new Font("Arial", Font.PLAIN, 14));
            playerIcon.setForeground(Color.WHITE);
            namePanel.add(playerIcon, BorderLayout.WEST);
            
            // Panel cho th√¥ng tin l√° b√†i v·ªõi thi·∫øt k·∫ø ph·∫≥ng h∆°n
            JPanel cardInfoPanel = new JPanel();
            cardInfoPanel.setLayout(new BoxLayout(cardInfoPanel, BoxLayout.Y_AXIS));
            cardInfoPanel.setBackground(Color.WHITE);
            cardInfoPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
            
            // Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng l√° b√†i d∆∞·ªõi d·∫°ng bi·ªÉu t∆∞·ª£ng nh·ªè v·ªõi hi·ªáu ·ª©ng
            JPanel cardIconsPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 3, 3));
            cardIconsPanel.setBackground(Color.WHITE);
            cardIconsPanel.setAlignmentX(Component.CENTER_ALIGNMENT);
            
            // Th√™m 7 icon nh·ªè ƒë·ªÉ bi·ªÉu th·ªã s·ªë l∆∞·ª£ng l√° b√†i (m·∫∑c ƒë·ªãnh ban ƒë·∫ßu)
            for (int j = 0; j < 7; j++) {
                // S·ª≠ d·ª•ng panel nh·ªè ƒë·ªÉ bi·ªÉu th·ªã l√° b√†i thay v√¨ emoji
                JPanel miniCard = new JPanel() {
                    @Override
                    protected void paintComponent(Graphics g) {
                        super.paintComponent(g);
                        Graphics2D g2d = (Graphics2D) g.create();
                        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                        
                        g2d.setColor(new Color(231, 76, 60));
                        g2d.fillRoundRect(0, 0, getWidth(), getHeight(), 3, 3);
                        g2d.dispose();
                    }
                };
                miniCard.setPreferredSize(new Dimension(12, 15));
                cardIconsPanel.add(miniCard);
            }
            
            JLabel cardCountLabel = new JLabel("S·ªë b√†i: 7");
            cardCountLabel.setFont(new Font("Arial", Font.BOLD, 13));
            cardCountLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
            cardCountLabel.setForeground(new Color(52, 152, 219)); // UNO Blue
            
            JLabel unoLabel = new JLabel("UNO: Ch∆∞a");
            unoLabel.setFont(new Font("Arial", Font.BOLD, 12));
            unoLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
            unoLabel.setForeground(new Color(231, 76, 60)); // UNO Red
            
            cardInfoPanel.add(cardIconsPanel);
            cardInfoPanel.add(Box.createVerticalStrut(5));
            cardInfoPanel.add(cardCountLabel);
            cardInfoPanel.add(Box.createVerticalStrut(3));
            cardInfoPanel.add(unoLabel);
            
            playerPanel.add(namePanel);
            playerPanel.add(cardInfoPanel);
            
            otherPlayersPanel.add(playerPanel);
            if (i < 2) otherPlayersPanel.add(Box.createVerticalStrut(15));
            otherPlayerPanels.add(playerPanel);
        }
        
        otherPlayersPanel.add(Box.createVerticalGlue());
        
        // Thi·∫øt k·∫ø hi·ªán ƒë·∫°i cho khu v·ª±c b√†i c·ªßa ng∆∞·ªùi ch∆°i - c·∫£i ti·∫øn theo ·∫£nh
        JPanel playerPanel = new JPanel(new BorderLayout());
        playerPanel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createCompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 0, 0, new Color(52, 152, 219)),
                BorderFactory.createEmptyBorder(5, 5, 5, 5)
            ),
            BorderFactory.createEmptyBorder(10, 10, 10, 10)
        ));
        playerPanel.setBackground(new Color(248, 249, 250));
        
        // Header cho khu v·ª±c b√†i ng∆∞·ªùi ch∆°i
        JPanel playerHeaderPanel = new JPanel(new BorderLayout());
        playerHeaderPanel.setBackground(new Color(52, 152, 219)); // UNO Blue
        playerHeaderPanel.setBorder(BorderFactory.createEmptyBorder(12, 15, 12, 15));
        
        JLabel playerCardLabel = new JLabel("üéÆ B√ÄI C·ª¶A B·∫†N");
        playerCardLabel.setFont(new Font("Arial", Font.BOLD, 16));
        playerCardLabel.setForeground(Color.WHITE);
        
        // Th√™m bi·ªÉu t∆∞·ª£ng s·ªë l√° b√†i
        JLabel cardCountLabel = new JLabel();
        cardCountLabel.setFont(new Font("Arial", Font.BOLD, 14));
        cardCountLabel.setForeground(Color.WHITE);
        cardCountLabel.setHorizontalAlignment(SwingConstants.RIGHT);
        
        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng b√†i
        Timer updateCardCountTimer = new Timer(500, e -> {
            cardCountLabel.setText("S·ªë b√†i: " + playerHand.size() + " ");
        });
        updateCardCountTimer.setRepeats(true);
        updateCardCountTimer.start();
        
        playerHeaderPanel.add(playerCardLabel, BorderLayout.WEST);
        playerHeaderPanel.add(cardCountLabel, BorderLayout.EAST);
        
        // S·ª≠ d·ª•ng WrapLayout v·ªõi spacing t·ªët h∆°n theo thi·∫øt k·∫ø
        playerHandPanel = new JPanel(new WrapLayout(FlowLayout.CENTER, 8, 8));
        playerHandPanel.setBackground(new Color(255, 255, 255));
        
        // T·ªëi ∆∞u k√≠ch th∆∞·ªõc
        playerHandPanel.setPreferredSize(new Dimension(1000, 200));
        
        // Thi·∫øt k·∫ø scrollPane ƒë·∫πp h∆°n
        JScrollPane handScrollPane = new JScrollPane(playerHandPanel);
        handScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        handScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        handScrollPane.setPreferredSize(new Dimension(1000, 180));
        handScrollPane.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createMatteBorder(1, 1, 1, 1, new Color(233, 236, 239)),
            BorderFactory.createEmptyBorder(5, 5, 5, 5)
        ));
        handScrollPane.getVerticalScrollBar().setUnitIncrement(16);
        
        // Tu·ª≥ ch·ªânh thanh cu·ªôn
        handScrollPane.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
            @Override
            protected JButton createDecreaseButton(int orientation) {
                JButton button = super.createDecreaseButton(orientation);
                button.setBackground(new Color(248, 249, 250));
                button.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 0, Color.LIGHT_GRAY));
                return button;
            }
            
            @Override
            protected JButton createIncreaseButton(int orientation) {
                JButton button = super.createIncreaseButton(orientation);
                button.setBackground(new Color(248, 249, 250));
                button.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 0, Color.LIGHT_GRAY));
                return button;
            }
            
            @Override
            protected void configureScrollBarColors() {
                this.thumbColor = new Color(52, 152, 219); // UNO Blue
                this.trackColor = new Color(248, 249, 250);
            }
        });
        
        playerPanel.add(playerHeaderPanel, BorderLayout.NORTH);
        
        // C·∫£i thi·ªán panel ch·ª©a c√°c n√∫t h√†nh ƒë·ªông
        JPanel actionPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 15));
        actionPanel.setBackground(new Color(250, 250, 250));
        actionPanel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createMatteBorder(2, 0, 0, 0, new Color(233, 236, 239)),
            BorderFactory.createEmptyBorder(10, 10, 10, 10)
        ));
        
        // S·ª≠ d·ª•ng UI Accent gradient theo thi·∫øt k·∫ø
        Color accentColor = new Color(90, 95, 207); // UI Accent color
        drawCardButton = createCleanButton("üÉè R√∫t b√†i", accentColor, Color.WHITE);
        endTurnButton = createCleanButton("‚úì K·∫øt th√∫c l∆∞·ª£t", new Color(108, 117, 125), Color.WHITE);
        unoButton = createCleanButton("üîä UNO!", new Color(231, 76, 60), Color.WHITE); // UNO Red
        
        actionPanel.add(drawCardButton);
        actionPanel.add(endTurnButton);
        actionPanel.add(unoButton);
        
        playerPanel.add(handScrollPane, BorderLayout.CENTER);
        playerPanel.add(actionPanel, BorderLayout.SOUTH);
        
        // Thi·∫øt k·∫ø panel chat b√™n ph·∫£i theo layout m·∫´u
        JPanel chatPanel = new JPanel(new BorderLayout());
        
        // Header cho khu v·ª±c chat
        JPanel chatHeaderPanel = new JPanel(new BorderLayout());
        chatHeaderPanel.setBackground(new Color(90, 95, 207)); // UI Accent
        chatHeaderPanel.setBorder(BorderFactory.createEmptyBorder(10, 15, 10, 15));
        
        JLabel chatLabel = new JLabel("üí¨ CHAT & TH√îNG B√ÅO");
        chatLabel.setFont(new Font("Arial", Font.BOLD, 14));
        chatLabel.setForeground(Color.WHITE);
        chatHeaderPanel.add(chatLabel, BorderLayout.WEST);
        
        // Main chat panel
        chatPanel.add(chatHeaderPanel, BorderLayout.NORTH);
        chatPanel.setPreferredSize(new Dimension(250, 700));
        chatPanel.setBackground(new Color(250, 250, 250)); // Light background
        
        // Thi·∫øt k·∫ø khu v·ª±c chat v·ªõi typography r√µ r√†ng
        chatArea = new JTextArea();
        chatArea.setEditable(false);
        chatArea.setFont(new Font("Arial", Font.PLAIN, 13));
        chatArea.setBackground(Color.WHITE);
        chatArea.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        chatArea.setLineWrap(true);
        chatArea.setWrapStyleWord(true);
        
        // Custom scrollpane v·ªõi vi·ªÅn v√† m√†u s·∫Øc ph√π h·ª£p
        JScrollPane chatScrollPane = new JScrollPane(chatArea);
        chatScrollPane.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createMatteBorder(1, 1, 1, 1, new Color(233, 236, 239)),
            BorderFactory.createEmptyBorder(0, 0, 0, 0)
        ));
        chatScrollPane.getVerticalScrollBar().setUnitIncrement(16);
        
        // T√πy ch·ªânh m√†u n·ªÅn c·ªßa scrollbar
        chatScrollPane.getVerticalScrollBar().setBackground(Color.WHITE);
        
        JPanel chatInputPanel = new JPanel(new BorderLayout(5, 5));
        chatInputPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        chatInputPanel.setBackground(new Color(245, 245, 245));
        
        // Thi·∫øt k·∫ø √¥ nh·∫≠p chat hi·ªán ƒë·∫°i
        chatField = new JTextField();
        chatField.setFont(new Font("Arial", Font.PLAIN, 13));
        chatField.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(90, 95, 207, 120), 1),
            BorderFactory.createEmptyBorder(8, 10, 8, 10)
        ));
        
        // Thi·∫øt k·∫ø n√∫t g·ª≠i ph√π h·ª£p v·ªõi UI Accent
        sendButton = new JButton("G·ª≠i");
        sendButton.setFont(new Font("Arial", Font.BOLD, 12));
        sendButton.setPreferredSize(new Dimension(70, 35));
        sendButton.setBackground(new Color(90, 95, 207)); // UI Accent gradient
        sendButton.setForeground(Color.WHITE);
        sendButton.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
        sendButton.setFocusPainted(false);
        
        chatInputPanel.add(chatField, BorderLayout.CENTER);
        chatInputPanel.add(sendButton, BorderLayout.EAST);
        
        chatPanel.add(chatScrollPane, BorderLayout.CENTER);
        chatPanel.add(chatInputPanel, BorderLayout.SOUTH);
        
        // Th√™m c√°c panel v√†o panel ch√≠nh
        gamePanel.add(infoPanel, BorderLayout.NORTH);
        gamePanel.add(topCardPanel, BorderLayout.CENTER);
        gamePanel.add(otherPlayersPanel, BorderLayout.WEST);
        gamePanel.add(playerPanel, BorderLayout.SOUTH);
        
        add(gamePanel, BorderLayout.CENTER);
        add(chatPanel, BorderLayout.EAST);
        
        // V√¥ hi·ªáu h√≥a c√°c n√∫t ban ƒë·∫ßu
        drawCardButton.setEnabled(false);
        endTurnButton.setEnabled(false);
        unoButton.setEnabled(false);
        
        // Thi·∫øt l·∫≠p tr·∫°ng th√°i ban ƒë·∫ßu
        canPlay = false;
        
        // Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n ng·∫Øn cho ng∆∞·ªùi ch∆°i m·ªõi
        showGameInstructions();
    }
    
    /**
     * Thi·∫øt l·∫≠p c√°c listener
     */
    private void setupListeners() {
        drawCardButton.addActionListener(e -> {
            if (canPlay) {
                clientMain.drawCard();
                drawCardButton.setEnabled(false);
                endTurnButton.setEnabled(true);
                canPlay = false;
            }
        });
        
        endTurnButton.addActionListener(e -> {
            clientMain.endTurn();
            endTurnButton.setEnabled(false);
            canPlay = false;
        });
        
        unoButton.addActionListener(e -> {
            clientMain.callUno();
        });
        
        sendButton.addActionListener(e -> {
            String message = chatField.getText().trim();
            if (!message.isEmpty()) {
                clientMain.sendChatMessage(message);
                chatField.setText("");
            }
        });
        
        chatField.addActionListener(e -> {
            String message = chatField.getText().trim();
            if (!message.isEmpty()) {
                clientMain.sendChatMessage(message);
                chatField.setText("");
            }
        });
    }
    
    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i game
     * 
     * @param gameState Tr·∫°ng th√°i game
     */
    public void updateGameState(GameState gameState) {
        System.out.println("GameGUI.updateGameState ƒë∆∞·ª£c g·ªçi v·ªõi gameState: " + gameState);
        
        // C·∫≠p nh·∫≠t l√° b√†i tr√™n c√πng
        topCard = gameState.getTopCard();
        updateTopCard();
        
        // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi ch∆°i hi·ªán t·∫°i
        String currentPlayerId = gameState.getCurrentPlayerId();
        
        // FIX: X√°c ƒë·ªãnh isMyTurn ngay t·ª´ ƒë·∫ßu v√† log r√µ r√†ng
        boolean isMyTurn = StringUtils.safeEquals(currentPlayerId, this.playerId);
        
        // Debug chi ti·∫øt
        System.out.println("DEBUG GameGUI: currentPlayerId='" + currentPlayerId + "', this.playerId='" + 
                          this.playerId + "', isMyTurn=" + isMyTurn);

        Map<String, PlayerInfo> playerInfos = gameState.getPlayerInfos();
        System.out.println("GameGUI: Th√¥ng tin ng∆∞·ªùi ch∆°i trong game: " + playerInfos.keySet());
        
        PlayerInfo currentPlayerInfo = playerInfos.get(currentPlayerId);
        
        if (currentPlayerInfo != null) {
            String currentPlayerName = currentPlayerInfo.getName();
            
            // Turn indicator v·ªõi glow effect theo thi·∫øt k·∫ø
            if (isMyTurn) {
                // T·∫°o glow effect v·ªõi border m√†u s√°ng
                currentPlayerLabel.setText("‚üπ L∆Ø·ª¢T C·ª¶A B·∫†N (" + currentPlayerName + ") ‚ü∏");
                currentPlayerLabel.setForeground(new Color(231, 76, 60)); // UNO Red
                currentPlayerLabel.setFont(currentPlayerLabel.getFont().deriveFont(Font.BOLD, 18));
                
                // T·∫°o hi·ªáu ·ª©ng glow v·ªõi border
                currentPlayerLabel.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createEmptyBorder(5, 10, 5, 10),
                    BorderFactory.createCompoundBorder(
                        BorderFactory.createLineBorder(new Color(231, 76, 60, 180), 2),
                        BorderFactory.createEmptyBorder(5, 15, 5, 15)
                    )
                ));
                
                // T·∫°o hi·ªáu ·ª©ng n·ªïi b·∫≠t
                currentPlayerLabel.setOpaque(true);
                currentPlayerLabel.setBackground(new Color(231, 76, 60, 30));
            } else {
                currentPlayerLabel.setText("L∆Ø·ª¢T C·ª¶A: " + currentPlayerName);
                currentPlayerLabel.setForeground(new Color(44, 62, 80)); // Wild/Black
                currentPlayerLabel.setFont(currentPlayerLabel.getFont().deriveFont(Font.PLAIN, 16));
                currentPlayerLabel.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
                currentPlayerLabel.setOpaque(false);
                currentPlayerLabel.setBackground(null);
            }
            
            System.out.println(StringUtils.formatNetworkLog("CLIENT", "TURN_DISPLAY", 
                              "Nguoi choi hien tai: " + currentPlayerName + 
                              " (ID: " + currentPlayerId + "), la luot cua toi: " + isMyTurn));
        } else {
            System.out.println(StringUtils.formatNetworkLog("CLIENT", "ERROR", 
                              "Khong tim thay thong tin cua currentPlayerId = " + currentPlayerId));
        }
        
        // FIX: C·∫≠p nh·∫≠t chi·ªÅu ch∆°i kh√¥ng d√πng k√Ω t·ª± ƒë·∫∑c bi·ªát
        directionLabel.setText("CHIEU CHOI: " + (gameState.isClockwise() ? "THUAN" : "NGUOC"));
        
        // C·∫≠p nh·∫≠t b√†i c·ªßa ng∆∞·ªùi ch∆°i
        PlayerInfo playerInfo = playerInfos.get(this.playerId); // Lu√¥n l·∫•y th√¥ng tin c·ªßa ch√≠nh ng∆∞·ªùi ch∆°i n√†y
        if (playerInfo != null && playerInfo.getHand() != null) {
            playerHand = playerInfo.getHand();
            
            // FIX: Truy·ªÅn isMyTurn v√†o updatePlayerHand ƒë·ªÉ n√≥ bi·∫øt l√∫c n√†o c√≥ th·ªÉ ƒë√°nh b√†i
            updatePlayerHand(isMyTurn);
        }
        
        // FIX: ƒê·∫∑t canPlay v√† c√°c n√∫t d·ª±a tr√™n isMyTurn
        // L∆∞u √Ω: Bi·∫øn n√†y c≈©ng ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong updatePlayerHand ƒë·ªÉ ƒë·∫£m b·∫£o nh·∫•t qu√°n
        this.canPlay = isMyTurn; 
        System.out.println(StringUtils.formatNetworkLog("CLIENT", "TURN_CONTROL", 
                "Cap nhat trang thai choi: canPlay = " + this.canPlay + " cho nguoi choi " + this.playerId));
        
        drawCardButton.setEnabled(isMyTurn);
        endTurnButton.setEnabled(false); // Ch·ªâ b·∫≠t sau khi r√∫t b√†i
        unoButton.setEnabled(playerHand.size() == 2); // Ch·ªâ b·∫≠t khi c√≤n 2 l√° b√†i
        
        // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi ch∆°i kh√°c
        List<PlayerInfo> otherPlayers = new ArrayList<>();
        for (String pid : playerInfos.keySet()) {
            // FIX: So s√°nh v·ªõi this.playerId ƒë·ªÉ lo·∫°i b·ªè ch√≠nh ng∆∞·ªùi ch∆°i n√†y
            if (!StringUtils.safeEquals(pid, this.playerId)) {
                otherPlayers.add(playerInfos.get(pid));
            }
        }
        
        // C·∫≠p nh·∫≠t giao di·ªán ng∆∞·ªùi ch∆°i kh√°c
        for (int i = 0; i < otherPlayerPanels.size(); i++) {
            JPanel panel = otherPlayerPanels.get(i);
            if (i < otherPlayers.size()) {
                PlayerInfo otherPlayer = otherPlayers.get(i);
                
                // ƒê√°nh d·∫•u r√µ r√†ng khi ƒë·∫øn l∆∞·ª£t c·ªßa ng∆∞·ªùi ch∆°i kh√°c
                boolean isOtherPlayersTurn = StringUtils.safeEquals(currentPlayerId, otherPlayer.getId());
                
                // Thay ƒë·ªïi ti√™u ƒë·ªÅ v√† m√†u s·∫Øc ƒë·ªÉ n·ªïi b·∫≠t ng∆∞·ªùi ch∆°i ƒëang c√≥ l∆∞·ª£t
                if (isOtherPlayersTurn) {
                    panel.setBorder(BorderFactory.createTitledBorder(
                        BorderFactory.createLineBorder(Color.RED, 2),
                        "‚üπ " + otherPlayer.getName() + " ‚ü∏"));
                } else {
                    panel.setBorder(BorderFactory.createTitledBorder(otherPlayer.getName()));
                }
                
                // T√¨m namePanel v√† cardInfoPanel
                Component[] components = panel.getComponents();
                JPanel namePanel = null;
                JPanel cardInfoPanel = null;
                
                if (components.length >= 2) {
                    namePanel = (JPanel) components[0];
                    cardInfoPanel = (JPanel) components[1];
                }
                
                // C·∫≠p nh·∫≠t t√™n ng∆∞·ªùi ch∆°i
                if (namePanel != null) {
                    Component[] nameComps = namePanel.getComponents();
                    for (Component comp : nameComps) {
                        if (comp instanceof JLabel) {
                            ((JLabel) comp).setText(otherPlayer.getName());
                            break;
                        }
                    }
                }
                
                // C·∫≠p nh·∫≠t th√¥ng tin l√° b√†i
                if (cardInfoPanel != null) {
                    Component[] infoComps = cardInfoPanel.getComponents();
                    
                    JPanel cardIconsPanel = null;
                    JLabel cardCountLabel = null;
                    JLabel unoLabel = null;
                    
                    for (Component comp : infoComps) {
                        if (comp instanceof JPanel) {
                            cardIconsPanel = (JPanel) comp;
                        } else if (comp instanceof JLabel) {
                            JLabel label = (JLabel) comp;
                            String text = label.getText();
                            if (text != null && text.startsWith("S·ªë b√†i:")) {
                                cardCountLabel = label;
                            } else if (text != null && text.startsWith("UNO:")) {
                                unoLabel = label;
                            }
                        }
                    }
                    
                    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng l√° b√†i tr·ª±c quan
                    if (cardIconsPanel != null) {
                        cardIconsPanel.removeAll();
                        int handSize = otherPlayer.getHandSize();
                        for (int j = 0; j < handSize; j++) {
                            JLabel cardIcon = new JLabel("üÉè");
                            cardIcon.setFont(new Font("Arial", Font.PLAIN, 12));
                            cardIconsPanel.add(cardIcon);
                        }
                        cardIconsPanel.revalidate();
                        cardIconsPanel.repaint();
                    }
                    
                    // C·∫≠p nh·∫≠t th√¥ng tin vƒÉn b·∫£n
                    if (cardCountLabel != null) {
                        cardCountLabel.setText("S·ªë b√†i: " + otherPlayer.getHandSize());
                        System.out.println(StringUtils.formatNetworkLog("CLIENT", "PLAYER_INFO", 
                                    "Cap nhat so bai cho " + otherPlayer.getName() + ": " + otherPlayer.getHandSize()));
                    }
                    
                    if (unoLabel != null) {
                        unoLabel.setText("UNO: " + (otherPlayer.hasCalledUno() ? "C√≥" : "Kh√¥ng"));
                        if (otherPlayer.hasCalledUno()) {
                            unoLabel.setForeground(new Color(231, 76, 60)); // UNO Red
                            unoLabel.setFont(unoLabel.getFont().deriveFont(Font.BOLD, 12));
                            
                            // Hi·ªÉn th·ªã toast th√¥ng b√°o
                            showToast(otherPlayer.getName() + " ƒë√£ g·ªçi UNO!", "warning");
                        } else {
                            unoLabel.setForeground(new Color(108, 117, 125)); // Gray
                            unoLabel.setFont(unoLabel.getFont().deriveFont(Font.PLAIN, 11));
                        }
                    }
                }
                
                panel.setVisible(true);
                System.out.println(StringUtils.formatNetworkLog("CLIENT", "UI_UPDATE", 
                                  "Da cap nhat thong tin cho doi thu " + otherPlayer.getName() + 
                                  ", so la bai: " + otherPlayer.getHandSize()));
            } else {
                panel.setVisible(false);
            }
        }
        
        // N·∫øu game k·∫øt th√∫c, hi·ªÉn th·ªã th√¥ng b√°o v·ªõi giao di·ªán ƒë·∫πp h∆°n
        if (gameState.isGameOver()) {
            String winnerId = gameState.getWinnerId();
            String winnerName = playerInfos.get(winnerId).getName();
            
            // T·∫°o th√¥ng b√°o chi·∫øn th·∫Øng v·ªõi hi·ªáu ·ª©ng ƒë·∫πp
            String message = "<html><div style='text-align: center;'>" +
                    "<h1 style='color: #e74c3c; margin-bottom: 10px;'>üèÜ CHI·∫æN TH·∫ÆNG! üèÜ</h1>" +
                    "<hr style='border: 1px solid #3498db;'>" +
                    "<h2 style='color: #2c3e50; margin: 15px 0;'>" + winnerName + "</h2>" +
                    "<p style='color: #7f8c8d; font-size: 14px;'>ƒë√£ ho√†n th√†nh tr√≤ ch∆°i UNO!</p>" +
                    "<p style='margin-top: 20px;'><i>Ch√∫c m·ª´ng b·∫°n!</i></p>" +
                    "</div></html>";
                    
            // Hi·ªÉn th·ªã dialog t√πy ch·ªânh
            JOptionPane.showMessageDialog(
                this,
                message,
                "üéÆ K·∫æT TH√öC GAME",
                JOptionPane.INFORMATION_MESSAGE,
                null  // kh√¥ng d√πng icon m·∫∑c ƒë·ªãnh
            );
        }
    }
    
    /**
     * C·∫≠p nh·∫≠t b√†i c·ªßa ng∆∞·ªùi ch∆°i
     * 
     * @param isCurrentPlayer C√≥ ph·∫£i l∆∞·ª£t c·ªßa ng∆∞·ªùi ch∆°i hi·ªán t·∫°i kh√¥ng
     */
    private void updatePlayerHand(boolean isCurrentPlayer) {
        playerHandPanel.removeAll();
        
        // FIX: ƒê·∫£m b·∫£o canPlay ph·∫£n √°nh ch√≠nh x√°c l√∫c n√†o ng∆∞·ªùi ch∆°i c√≥ th·ªÉ ƒë√°nh b√†i
        this.canPlay = isCurrentPlayer;
        System.out.println(StringUtils.formatNetworkLog("CLIENT", "GAME_STATE", 
                "Hien thi thi luot cua nguoi choi: P" + playerId + " (ID: " + playerId + "), isCurrentPlayer = " + isCurrentPlayer));

        for (Card card : playerHand) {
            JButton cardButton = createCardButton(card);
            final int cardIndex = playerHand.indexOf(card);
            
            // FIX: Ch·ªâ b·∫≠t l√° b√†i c√≥ th·ªÉ ch∆°i ƒë∆∞·ª£c khi l√† l∆∞·ª£t c·ªßa ng∆∞·ªùi ch∆°i n√†y
            boolean canPlayThisCard = isCurrentPlayer && card.canPlayOn(topCard);
            cardButton.setEnabled(canPlayThisCard);
            
            System.out.println(StringUtils.formatNetworkLog("CLIENT", "CARD_ANALYSIS", 
                    "La bai: " + card + ", co the danh: " + canPlayThisCard));
            
            cardButton.addActionListener(e -> {
                System.out.println(StringUtils.formatNetworkLog("CLIENT", "CARD_ACTION", 
                    "Nguoi choi chon la bai, trang thai canPlay = " + canPlay + ", la bai = " + card));
                
                // Ki·ªÉm tra l·∫°i xem c√≥ th·∫≠t s·ª± l√† l∆∞·ª£t c·ªßa ng∆∞·ªùi ch∆°i n√†y kh√¥ng
                if (canPlay) {
                    // Ki·ªÉm tra xem l√° b√†i c√≥ th·ªÉ ƒë√°nh ƒë∆∞·ª£c kh√¥ng
                    if (card.canPlayOn(topCard)) {
                        // N·∫øu l√† l√° wild, hi·ªÉn th·ªã dialog ch·ªçn m√†u
                        if (card.getType() == CardType.WILD || card.getType() == CardType.WILD_DRAW_FOUR) {
                            CardColor selectedColor = showColorSelectionDialog();
                            if (selectedColor != null) {
                                clientMain.playCard(cardIndex, selectedColor);
                                // FIX: V√¥ hi·ªáu h√≥a ngay sau khi ƒë√°nh b√†i
                                canPlay = false;
                                drawCardButton.setEnabled(false);
                                endTurnButton.setEnabled(false);
                            }
                        } else {
                            clientMain.playCard(cardIndex, card.getColor());
                            // FIX: V√¥ hi·ªáu h√≥a ngay sau khi ƒë√°nh b√†i
                            canPlay = false;
                            drawCardButton.setEnabled(false);
                            endTurnButton.setEnabled(false);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "B·∫°n kh√¥ng th·ªÉ ƒë√°nh l√° b√†i n√†y!", "L·ªói", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    System.out.println(StringUtils.formatNetworkLog("CLIENT", "INVALID_ACTION", 
                        "Khong the danh bai vi khong phai luot cua nguoi choi! canPlay = " + canPlay));
                }
            });
            
            playerHandPanel.add(cardButton);
        }
        
        playerHandPanel.revalidate();
        playerHandPanel.repaint();
    }
    
    /**
     * T·∫°o n√∫t hi·ªÉn th·ªã l√° b√†i
     * 
     * @param card L√° b√†i
     * @return N√∫t hi·ªÉn th·ªã l√° b√†i
     */
    private JButton createCardButton(Card card) {
        JButton cardButton = new JButton() {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                
                // Clean, minimalist card design
                int width = getWidth();
                int height = getHeight();
                
                // Background color based on card color - vibrant and clear
                Color bgColor;
                String colorSymbol = "";
                switch (card.getColor()) {
                    case RED:
                        bgColor = new Color(231, 76, 60); // UNO Red #e74c3c
                        colorSymbol = "üî¥";
                        break;
                    case GREEN: 
                        bgColor = new Color(39, 174, 96); // UNO Green #27ae60
                        colorSymbol = "üü¢";
                        break;
                    case BLUE:
                        bgColor = new Color(52, 152, 219); // UNO Blue #3498db
                        colorSymbol = "üîµ";
                        break;
                    case YELLOW:
                        bgColor = new Color(241, 196, 15); // UNO Yellow #f1c40f
                        colorSymbol = "üü°";
                        break;
                    default:
                        bgColor = new Color(44, 62, 80); // Wild/Black #2c3e50
                        colorSymbol = "‚ö´";
                        break;
                }
                
                // V·∫Ω hi·ªáu ·ª©ng gradient cho n·ªÅn
                GradientPaint gradientPaint = new GradientPaint(
                    0, 0, bgColor, 
                    width, height, bgColor.darker()
                );
                g2.setPaint(gradientPaint);
                g2.fillRoundRect(0, 0, width, height, 15, 15);
                
                // Th√™m hi·ªáu ·ª©ng n·ªïi 3D
                // Ph·∫ßn s√°ng ·ªü tr√™n v√† b√™n tr√°i
                g2.setColor(new Color(255, 255, 255, 80));
                g2.setStroke(new BasicStroke(2f));
                g2.drawLine(3, 3, width-3, 3);
                g2.drawLine(3, 3, 3, height-3);
                
                // Ph·∫ßn t·ªëi ·ªü d∆∞·ªõi v√† b√™n ph·∫£i
                g2.setColor(new Color(0, 0, 0, 60));
                g2.drawLine(width-3, 3, width-3, height-3);
                g2.drawLine(3, height-3, width-3, height-3);
                
                // Vi·ªÅn tr·∫Øng ƒë·∫πp
                g2.setColor(Color.WHITE);
                g2.setStroke(new BasicStroke(2f));
                g2.drawRoundRect(1, 1, width-2, height-2, 15, 15);
                
                // Card content
                g2.setColor(Color.WHITE);
                g2.setFont(new Font("Arial", Font.BOLD, 28));
                
                String displayText;
                String typeSymbol = "";
                
                if (card.getType() == CardType.NUMBER) {
                    displayText = String.valueOf(card.getValue());
                } else {
                    // S·ª≠ d·ª•ng bi·ªÉu t∆∞·ª£ng Unicode r√µ r√†ng h∆°n cho c√°c l√° ƒë·∫∑c bi·ªát
                    switch (card.getType()) {
                        case SKIP:
                            displayText = "‚äò";  // K√Ω hi·ªáu c·∫•m
                            typeSymbol = "SKIP";
                            break;
                        case REVERSE:
                            displayText = "‚§∏";  // M≈©i t√™n ƒë·∫£o chi·ªÅu
                            typeSymbol = "REV";
                            break;
                        case DRAW_TWO:
                            displayText = "+2";
                            typeSymbol = "R√öT 2";
                            break;
                        case WILD:
                            displayText = "‚òÖ";  // Ng√¥i sao cho Wild
                            typeSymbol = "ƒê·ªîI M√ÄU";
                            break;
                        case WILD_DRAW_FOUR:
                            displayText = "+4";
                            typeSymbol = "ƒê·ªîI & +4";
                            break;
                        default:
                            displayText = "?";
                            break;
                    }
                }
                FontMetrics fm = g2.getFontMetrics();
                int textWidth = fm.stringWidth(displayText);
                int textHeight = fm.getAscent();
                
                // Center the main symbol/number
                int x = (width - textWidth) / 2;
                int y = (height + textHeight) / 2 - 10;
                
                g2.drawString(displayText, x, y);
                
                // V·∫Ω t√™n lo·∫°i l√° b√†i ph√≠a d∆∞·ªõi (n·∫øu kh√¥ng ph·∫£i s·ªë) - Typography c·∫£i ti·∫øn
                if (card.getType() != CardType.NUMBER && !typeSymbol.isEmpty()) {
                    // Font ƒë·∫≠m h∆°n cho card type theo thi·∫øt k·∫ø
                    g2.setFont(new Font("Arial", Font.BOLD, 10));
                    FontMetrics fmSmall = g2.getFontMetrics();
                    int typeWidth = fmSmall.stringWidth(typeSymbol);
                    int typeX = (width - typeWidth) / 2;
                    g2.drawString(typeSymbol, typeX, height - 15);
                }
                
                // V·∫Ω bi·ªÉu t∆∞·ª£ng m√†u ·ªü g√≥c tr√™n b√™n tr√°i
                g2.setFont(new Font("Arial", Font.PLAIN, 16));
                g2.drawString(colorSymbol, 3, 20);
                
                // Draw corner symbols for better visual balance
                g2.setFont(new Font("Arial", Font.BOLD, 12));
                g2.drawString(displayText, 5, 15);
                
                // Rotate and draw bottom-right corner
                g2.rotate(Math.PI, width/2.0, height/2.0);
                g2.drawString(displayText, 5, 15);
                
                g2.dispose();
            }
        };
        
        cardButton.setPreferredSize(new Dimension(85, 130));
        cardButton.setOpaque(false);
        cardButton.setContentAreaFilled(false);
        cardButton.setBorderPainted(false);
        cardButton.setFocusPainted(false);
        
        // Th√™m tooltip gi·∫£i th√≠ch cho t·ª´ng lo·∫°i l√° b√†i
        String tooltip = getCardTooltip(card);
        cardButton.setToolTipText(tooltip);
        
        // Card hover effect (lift up) theo thi·∫øt k·∫ø
        cardButton.addMouseListener(new java.awt.event.MouseAdapter() {
            private final Timer hoverTimer = new Timer(20, null);
            private int steps = 0;
            private final int maxSteps = 8;
            
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (cardButton.isEnabled()) {
                    // Animation n√¢ng l√° b√†i l√™n
                    hoverTimer.stop();
                    steps = 0;
                    
                    hoverTimer.addActionListener(e -> {
                        if (steps < maxSteps) {
                            steps++;
                            // TƒÉng k√≠ch th∆∞·ªõc v√† di chuy·ªÉn l√™n tr√™n
                            cardButton.setPreferredSize(new Dimension(
                                85 + (int)(5 * ((float)steps/maxSteps)), 
                                130 + (int)(5 * ((float)steps/maxSteps))
                            ));
                            // Thay ƒë·ªïi margin ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng n√¢ng l√™n
                            ((JComponent)cardButton.getParent()).setBorder(
                                BorderFactory.createEmptyBorder(0, 0, steps, 0)
                            );
                            cardButton.revalidate();
                            cardButton.repaint();
                        } else {
                            hoverTimer.stop();
                        }
                    });
                    
                    hoverTimer.start();
                }
            }
            
            public void mouseExited(java.awt.event.MouseEvent evt) {
                // Animation h·∫° l√° b√†i xu·ªëng
                hoverTimer.stop();
                steps = maxSteps;
                
                hoverTimer.addActionListener(e -> {
                    if (steps > 0) {
                        steps--;
                        // Gi·∫£m k√≠ch th∆∞·ªõc v√† h·∫° xu·ªëng
                        cardButton.setPreferredSize(new Dimension(
                            85 + (int)(5 * ((float)steps/maxSteps)), 
                            130 + (int)(5 * ((float)steps/maxSteps))
                        ));
                        // Thay ƒë·ªïi margin ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng h·∫° xu·ªëng
                        ((JComponent)cardButton.getParent()).setBorder(
                            BorderFactory.createEmptyBorder(0, 0, steps, 0)
                        );
                        cardButton.revalidate();
                        cardButton.repaint();
                    } else {
                        hoverTimer.stop();
                        // Tr·∫£ v·ªÅ k√≠ch th∆∞·ªõc ban ƒë·∫ßu
                        cardButton.setPreferredSize(new Dimension(85, 130));
                        ((JComponent)cardButton.getParent()).setBorder(null);
                    }
                });
                
                hoverTimer.start();
            }
        });
        return cardButton;
    }
    
    /**
     * Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n ng·∫Øn g·ªçn cho ng∆∞·ªùi ch∆°i m·ªõi v·ªõi thi·∫øt k·∫ø hi·ªán ƒë·∫°i
     */
    private void showGameInstructions() {
        String instructions = "<html><div style='width: 500px; font-family: Arial, sans-serif;'>" +
                "<div style='background: linear-gradient(135deg, #e74c3c, #c0392b); color: white; padding: 15px; border-radius: 10px 10px 0 0;'>" +
                "<h1 style='margin: 0; text-align: center; text-shadow: 1px 1px 2px rgba(0,0,0,0.3);'>üéÆ H∆Ø·ªöNG D·∫™N CH∆†I UNO</h1>" +
                "</div>" +
                
                "<div style='background-color: #ffffff; padding: 20px; border-left: 1px solid #eee; border-right: 1px solid #eee; box-shadow: 0 2px 5px rgba(0,0,0,0.1) inset;'>" +
                
                "<div style='background: linear-gradient(135deg, #3498db, #2980b9); color: white; padding: 10px 15px; border-radius: 8px; margin-bottom: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);'>" +
                "<h3 style='margin: 0;'>üéØ M·ª§C TI√äU</h3>" +
                "</div>" +
                "<p style='margin-left: 15px; line-height: 1.5; font-size: 14px;'>ƒê√°nh h·∫øt l√° b√†i tr√™n tay tr∆∞·ªõc ƒë·ªëi th·ªß ƒë·ªÉ gi√†nh chi·∫øn th·∫Øng!</p>" +
                
                "<div style='background: linear-gradient(135deg, #2ecc71, #27ae60); color: white; padding: 10px 15px; border-radius: 8px; margin: 20px 0 15px 0; box-shadow: 0 2px 4px rgba(0,0,0,0.1);'>" +
                "<h3 style='margin: 0;'>üìã LU·∫¨T C∆† B·∫¢N</h3>" +
                "</div>" +
                "<ul style='margin-top: 10px; padding-left: 30px; line-height: 1.6; font-size: 14px;'>" +
                "<li>ƒê√°nh l√° b√†i <b>c√πng m√†u</b> ho·∫∑c <b>c√πng s·ªë/k√Ω hi·ªáu</b> v·ªõi l√° tr√™n c√πng</li>" +
                "<li>L√° <b>ƒê·ªïi m√†u (‚òÖ)</b> v√† <b>+4</b> c√≥ th·ªÉ ƒë√°nh b·∫•t k·ª≥ l√∫c n√†o</li>" +
                "<li>Khi c√≤n 2 l√°, b·∫°n <b>ph·∫£i</b> nh·∫•n n√∫t <b>'UNO!'</b> ƒë·ªÉ tuy√™n b·ªë</li>" +
                "<li>N·∫øu kh√¥ng tuy√™n b·ªë UNO, b·∫°n c√≥ th·ªÉ b·ªã ph·∫°t r√∫t 2 l√° b√†i</li>" +
                "</ul>" +
                
                "<div style='background: linear-gradient(135deg, #f39c12, #e67e22); color: white; padding: 10px 15px; border-radius: 8px; margin: 20px 0 15px 0; box-shadow: 0 2px 4px rgba(0,0,0,0.1);'>" +
                "<h3 style='margin: 0;'>üÉè L√Å ƒê·∫∂C BI·ªÜT</h3>" +
                "</div>" +
                
                "<table style='width: 100%; border-collapse: separate; border-spacing: 0; margin: 10px 0; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 5px rgba(0,0,0,0.1);'>" +
                
                "<tr style='background-color: #f8f9fa;'>" +
                "<td style='padding: 12px 15px; border-bottom: 1px solid #e9ecef; width: 70px;'><div style='background-color: #e74c3c; color: white; width: 40px; height: 40px; border-radius: 6px; display: flex; align-items: center; justify-content: center; font-size: 20px; font-weight: bold; box-shadow: 0 2px 3px rgba(0,0,0,0.1);'>‚äò</div></td>" +
                "<td style='padding: 12px; border-bottom: 1px solid #e9ecef;'><b style='color: #e74c3c;'>B·ªè l∆∞·ª£t:</b> Ng∆∞·ªùi k·∫ø ti·∫øp b·ªã m·∫•t l∆∞·ª£t ƒëi</td>" +
                "</tr>" +
                
                "<tr style='background-color: #ffffff;'>" +
                "<td style='padding: 12px 15px; border-bottom: 1px solid #e9ecef;'><div style='background-color: #3498db; color: white; width: 40px; height: 40px; border-radius: 6px; display: flex; align-items: center; justify-content: center; font-size: 20px; font-weight: bold; box-shadow: 0 2px 3px rgba(0,0,0,0.1);'>‚§∏</div></td>" +
                "<td style='padding: 12px; border-bottom: 1px solid #e9ecef;'><b style='color: #3498db;'>ƒê·∫£o chi·ªÅu:</b> Thay ƒë·ªïi h∆∞·ªõng l∆∞·ª£t ch∆°i</td>" +
                "</tr>" +
                
                "<tr style='background-color: #f8f9fa;'>" +
                "<td style='padding: 12px 15px; border-bottom: 1px solid #e9ecef;'><div style='background-color: #f1c40f; color: white; width: 40px; height: 40px; border-radius: 6px; display: flex; align-items: center; justify-content: center; font-size: 20px; font-weight: bold; box-shadow: 0 2px 3px rgba(0,0,0,0.1);'>+2</div></td>" +
                "<td style='padding: 12px; border-bottom: 1px solid #e9ecef;'><b style='color: #f1c40f;'>R√∫t 2:</b> Ng∆∞·ªùi k·∫ø ti·∫øp ph·∫£i r√∫t 2 l√° v√† m·∫•t l∆∞·ª£t</td>" +
                "</tr>" +
                
                "<tr style='background-color: #ffffff;'>" +
                "<td style='padding: 12px 15px; border-bottom: 1px solid #e9ecef;'><div style='background-color: #9b59b6; color: white; width: 40px; height: 40px; border-radius: 6px; display: flex; align-items: center; justify-content: center; font-size: 20px; font-weight: bold; box-shadow: 0 2px 3px rgba(0,0,0,0.1);'>‚òÖ</div></td>" +
                "<td style='padding: 12px; border-bottom: 1px solid #e9ecef;'><b style='color: #9b59b6;'>ƒê·ªïi m√†u:</b> Ch·ªçn m√†u ti·∫øp theo cho l∆∞·ª£t ch∆°i</td>" +
                "</tr>" +
                
                "<tr style='background-color: #f8f9fa;'>" +
                "<td style='padding: 12px 15px; border-bottom: 1px solid #e9ecef;'><div style='background-color: #2c3e50; color: white; width: 40px; height: 40px; border-radius: 6px; display: flex; align-items: center; justify-content: center; font-size: 20px; font-weight: bold; box-shadow: 0 2px 3px rgba(0,0,0,0.1);'>+4</div></td>" +
                "<td style='padding: 12px; border-bottom: 1px solid #e9ecef;'><b style='color: #2c3e50;'>ƒê·ªïi m√†u +4:</b> Ch·ªçn m√†u v√† ng∆∞·ªùi k·∫ø ti·∫øp r√∫t 4 l√°</td>" +
                "</tr>" +
                "</table>" +
                
                "<div style='background: linear-gradient(135deg, #9b59b6, #8e44ad); color: white; padding: 10px 15px; border-radius: 8px; margin: 20px 0 15px 0; box-shadow: 0 2px 4px rgba(0,0,0,0.1);'>" +
                "<h3 style='margin: 0;'>üí° M·∫∏O CH∆†I</h3>" +
                "</div>" +
                "<ul style='margin-top: 10px; padding-left: 30px; line-height: 1.6; font-size: 14px;'>" +
                "<li>Di chu·ªôt qua l√° b√†i ƒë·ªÉ xem th√¥ng tin chi ti·∫øt v√† hi·ªáu ·ª©ng</li>" +
                "<li>Theo d√µi s·ªë l∆∞·ª£ng b√†i c·ªßa ƒë·ªëi th·ªß ƒë·ªÉ ƒë∆∞a ra chi·∫øn thu·∫≠t t·ªët nh·∫•t</li>" +
                "<li>Gi·ªØ l·∫°i l√° ƒë·∫∑c bi·ªát ƒë·ªÉ ph√≤ng th·ªß khi ƒë·ªëi th·ªß s·∫Øp UNO</li>" +
                "<li>N·∫øu ƒë·ªëi th·ªß qu√™n g·ªçi UNO, h√£y nhanh ch√≥ng th√¥ng b√°o</li>" +
                "</ul>" +
                "</div>" +
                
                "<div style='background: linear-gradient(135deg, #5A5FCF, #3F4599); color: white; padding: 15px; border-radius: 0 0 10px 10px; text-align: center; font-weight: bold; text-shadow: 1px 1px 2px rgba(0,0,0,0.2);'>" +
                "üëë CH√öC B·∫†N CHI·∫æN TH·∫ÆNG! üèÜ" +
                "</div>" +
                
                "</div></html>";
        
        // T·∫°o JDialog t√πy ch·ªânh v·ªõi hi·ªáu ·ª©ng ƒë·ªï b√≥ng
        final JDialog dialog = new JDialog(this, "H∆Ø·ªöNG D·∫™N UNO", true);
        dialog.setLayout(new BorderLayout());
        dialog.getContentPane().setBackground(new Color(245, 245, 245));
        
        // Panel ch√≠nh v·ªõi vi·ªÅn v√† ƒë·ªï b√≥ng
        JPanel mainPanel = new JPanel(new BorderLayout());
        mainPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));
        mainPanel.setBackground(new Color(245, 245, 245));
        
        // Hi·ªÉn th·ªã n·ªôi dung h∆∞·ªõng d·∫´n
        JLabel instructionLabel = new JLabel(instructions);
        JScrollPane scrollPane = new JScrollPane(instructionLabel);
        scrollPane.setBorder(BorderFactory.createLineBorder(new Color(90, 95, 207, 80), 1));
        scrollPane.getVerticalScrollBar().setUnitIncrement(16);
        mainPanel.add(scrollPane, BorderLayout.CENTER);
        
        // N√∫t ƒë√≥ng v·ªõi hi·ªáu ·ª©ng hover
        JButton closeButton = new JButton("ƒê√É HI·ªÇU! B·∫ÆT ƒê·∫¶U CH∆†I");
        closeButton.setFont(new Font("Arial", Font.BOLD, 14));
        closeButton.setBackground(new Color(90, 95, 207)); // UI Accent
        closeButton.setForeground(Color.WHITE);
        closeButton.setFocusPainted(false);
        closeButton.setBorder(BorderFactory.createEmptyBorder(12, 25, 12, 25));
        closeButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        
        // Hi·ªáu ·ª©ng hover cho n√∫t
        closeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                closeButton.setBackground(new Color(106, 111, 212));
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                closeButton.setBackground(new Color(90, 95, 207));
            }
        });
        
        closeButton.addActionListener(e -> dialog.dispose());
        
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        buttonPanel.add(closeButton);
        buttonPanel.setBorder(BorderFactory.createEmptyBorder(15, 0, 5, 0));
        buttonPanel.setBackground(new Color(245, 245, 245));
        mainPanel.add(buttonPanel, BorderLayout.SOUTH);
        
        dialog.add(mainPanel, BorderLayout.CENTER);
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setResizable(false);
        
        // Hi·ªÉn th·ªã dialog tr·ª±c ti·∫øp kh√¥ng d√πng hi·ªáu ·ª©ng opacity
        // v√¨ dialog ƒë∆∞·ª£c trang tr√≠ kh√¥ng th·ªÉ ƒë·∫∑t opacity
        dialog.setVisible(true);
    }
    
    /**
     * L·∫•y t√™n m√†u hi·ªÉn th·ªã b·∫±ng ti·∫øng Vi·ªát
     * 
     * @param color M√†u l√° b√†i
     * @return T√™n m√†u b·∫±ng ti·∫øng Vi·ªát
     */
    private String getColorDisplayName(CardColor color) {
        switch (color) {
            case RED:
                return "ƒê·ªé";
            case GREEN:
                return "XANH L√Å";
            case BLUE:
                return "XANH D∆Ø∆†NG";
            case YELLOW:
                return "V√ÄNG";
            default:
                return "ƒêEN";
        }
    }
    
    /**
     * L·∫•y tooltip gi·∫£i th√≠ch cho t·ª´ng lo·∫°i l√° b√†i
     * 
     * @param card L√° b√†i
     * @return Ch√∫ th√≠ch gi·∫£i th√≠ch
     */
    private String getCardTooltip(Card card) {
        String colorName = getColorDisplayName(card.getColor());
        
        if (card.getType() == CardType.NUMBER) {
            return "<html><b>L√° s·ªë " + card.getValue() + " m√†u " + colorName + "</b><br>" +
                   "C√≥ th·ªÉ ƒë√°nh khi l√° tr√™n c√πng c√πng s·ªë ho·∫∑c c√πng m√†u</html>";
        } else {
            switch (card.getType()) {
                case SKIP:
                    return "<html><b>L√° B·ªè L∆∞·ª£t m√†u " + colorName + "</b><br>" +
                           "Ng∆∞·ªùi ch∆°i k·∫ø ti·∫øp s·∫Ω b·ªã m·∫•t l∆∞·ª£t ch∆°i<br>" +
                           "C√≥ th·ªÉ ƒë√°nh khi l√° tr√™n c√πng c√πng m√†u ho·∫∑c c≈©ng l√† l√° B·ªè L∆∞·ª£t</html>";
                case REVERSE:
                    return "<html><b>L√° ƒê·∫£o Chi·ªÅu m√†u " + colorName + "</b><br>" +
                           "Thay ƒë·ªïi chi·ªÅu ch∆°i (thu·∫≠n ‚Üî ng∆∞·ª£c)<br>" +
                           "C√≥ th·ªÉ ƒë√°nh khi l√° tr√™n c√πng c√πng m√†u ho·∫∑c c≈©ng l√† l√° ƒê·∫£o Chi·ªÅu</html>";
                case DRAW_TWO:
                    return "<html><b>L√° R√∫t 2 m√†u " + colorName + "</b><br>" +
                           "Ng∆∞·ªùi ch∆°i k·∫ø ti·∫øp ph·∫£i r√∫t 2 l√° v√† m·∫•t l∆∞·ª£t<br>" +
                           "C√≥ th·ªÉ ƒë√°nh khi l√° tr√™n c√πng c√πng m√†u ho·∫∑c c≈©ng l√† l√° R√∫t 2</html>";
                case WILD:
                    return "<html><b>L√° ƒê·ªïi M√†u</b><br>" +
                           "C√≥ th·ªÉ ƒë√°nh b·∫•t k·ª≥ l√∫c n√†o<br>" +
                           "Cho ph√©p b·∫°n ch·ªçn m√†u ti·∫øp theo</html>";
                case WILD_DRAW_FOUR:
                    return "<html><b>L√° ƒê·ªïi M√†u +4</b><br>" +
                           "Ch·ªâ ƒë√°nh khi kh√¥ng c√≥ l√° n√†o c√πng m√†u v·ªõi l√° tr√™n c√πng<br>" +
                           "Ng∆∞·ªùi ch∆°i k·∫ø ti·∫øp c√≥ th·ªÉ th√°ch th·ª©c n·∫øu nghi ng·ªù<br>" +
                           "N·∫øu h·ª£p l·ªá: ng∆∞·ªùi k·∫ø ti·∫øp r√∫t 4 l√° v√† m·∫•t l∆∞·ª£t<br>" +
                           "N·∫øu th√°ch th·ª©c th√†nh c√¥ng: b·∫°n r√∫t 4 l√°</html>";
                default:
                    return "L√° b√†i ƒë·∫∑c bi·ªát";
            }
        }
    }
    
    /**
     * Updates the display of the top card with clean, modern design
     */
    private void updateTopCard() {
        if (topCard != null) {
            // Clean background colors
            Color bgColor;
            switch (topCard.getColor()) {
                case RED:
                    bgColor = new Color(220, 53, 69);
                    break;
                case GREEN:
                    bgColor = new Color(40, 167, 69);
                    break;
                case BLUE:
                    bgColor = new Color(0, 123, 255);
                    break;
                case YELLOW:
                    bgColor = new Color(255, 193, 7);
                    break;
                default:
                    bgColor = new Color(52, 58, 64);
                    break;
            }
            
            topCardLabel.setBackground(bgColor);
            topCardLabel.setForeground(Color.WHITE);
            topCardLabel.setOpaque(true);
            
            // Hi·ªÉn th·ªã r√µ r√†ng h∆°n cho l√° b√†i tr√™n c√πng
            String displayText;
            String cardDescription = "";
            
            if (topCard.getType() == CardType.NUMBER) {
                displayText = "<html><div style='text-align: center;'><font size='6'>" + 
                             topCard.getValue() + "</font><br><font size='3'>" + 
                             getColorDisplayName(topCard.getColor()) + "</font></div></html>";
            } else {
                String symbol = "";
                switch (topCard.getType()) {
                    case SKIP:
                        symbol = "‚äò";
                        cardDescription = "B·ªé L∆Ø·ª¢T";
                        break;
                    case REVERSE:
                        symbol = "‚§∏";
                        cardDescription = "ƒê·∫¢O CHI·ªÄU";
                        break;
                    case DRAW_TWO:
                        symbol = "+2";
                        cardDescription = "R√öT 2 L√Å";
                        break;
                    case WILD:
                        symbol = "‚òÖ";
                        cardDescription = "ƒê·ªîI M√ÄU";
                        break;
                    case WILD_DRAW_FOUR:
                        symbol = "+4";
                        cardDescription = "ƒê·ªîI M√ÄU & R√öT 4";
                        break;
                    default:
                        symbol = "?";
                        cardDescription = "KH√îNG R√ï";
                        break;
                }
                
                displayText = "<html><div style='text-align: center;'><font size='6'>" + 
                             symbol + "</font><br><font size='2'>" + 
                             cardDescription + "</font><br><font size='3'>" + 
                             getColorDisplayName(topCard.getColor()) + "</font></div></html>";
            }
            
            topCardLabel.setText(displayText);
            
            // N√¢ng c·∫•p vi·ªÅn cho l√° b√†i tr√™n c√πng - th√™m hi·ªáu ·ª©ng 3D
            topCardLabel.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(Color.WHITE, 3),
                    BorderFactory.createCompoundBorder(
                        BorderFactory.createRaisedBevelBorder(),
                        BorderFactory.createEmptyBorder(10, 10, 10, 10)
                    )
                ),
                BorderFactory.createEmptyBorder(0, 0, 0, 0)
            ));
        } else {
            topCardLabel.setText("No Card");
            topCardLabel.setOpaque(false);
            topCardLabel.setBackground(null);
            topCardLabel.setForeground(Color.BLACK);
            topCardLabel.setBorder(BorderFactory.createLineBorder(Color.GRAY, 2));
        }
    }
    

    
    /**
     * Hi·ªÉn th·ªã dialog ch·ªçn m√†u cho l√° Wild v·ªõi thi·∫øt k·∫ø hi·ªán ƒë·∫°i
     * 
     * @return M√†u ƒë∆∞·ª£c ch·ªçn
     */
    private CardColor showColorSelectionDialog() {
        // Panel ch√≠nh v·ªõi layout m·∫°nh m·∫Ω
        JPanel mainPanel = new JPanel(new BorderLayout(0, 15));
        mainPanel.setBackground(new Color(248, 249, 250));
        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        // T·∫°o header cho dialog
        JPanel headerPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                
                // V·∫Ω gradient background
                GradientPaint gradient = new GradientPaint(
                    0, 0, new Color(90, 95, 207), 
                    getWidth(), 0, new Color(123, 128, 235)
                );
                g2.setPaint(gradient);
                g2.fillRoundRect(0, 0, getWidth(), getHeight(), 10, 10);
                
                g2.dispose();
                super.paintComponent(g);
            }
        };
        headerPanel.setLayout(new BorderLayout());
        headerPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));
        headerPanel.setOpaque(false);
        
        // T·∫°o ti√™u ƒë·ªÅ v·ªõi thi·∫øt k·∫ø hi·ªán ƒë·∫°i
        JLabel titleLabel = new JLabel("CH·ªåN M√ÄU CHO L√Å B√ÄI", SwingConstants.CENTER);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 18));
        titleLabel.setForeground(Color.WHITE);
        headerPanel.add(titleLabel, BorderLayout.CENTER);
        
        // Th√™m icon wild card v√†o header
        JLabel wildIcon = new JLabel("‚òÖ", SwingConstants.CENTER);
        wildIcon.setFont(new Font("Arial", Font.BOLD, 24));
        wildIcon.setForeground(Color.WHITE);
        headerPanel.add(wildIcon, BorderLayout.WEST);
        
        // T·∫°o c√°c n√∫t m√†u s·∫Øc v·ªõi thi·∫øt k·∫ø hi·ªán ƒë·∫°i
        JPanel colorGrid = new JPanel(new GridLayout(2, 2, 15, 15)) {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                
                // V·∫Ω background v·ªõi vi·ªÅn bo tr√≤n
                g2.setColor(new Color(255, 255, 255));
                g2.fillRoundRect(0, 0, getWidth(), getHeight(), 10, 10);
                
                g2.dispose();
                super.paintComponent(g);
            }
        };
        colorGrid.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        colorGrid.setOpaque(false);
        
        // T·∫°o c√°c n√∫t m√†u v·ªõi thi·∫øt k·∫ø hi·ªán ƒë·∫°i v√† hover effect
        JButton redButton = createAdvancedColorButton("ƒê·ªé", new Color(231, 76, 60), Color.WHITE, "‚ô•");
        JButton greenButton = createAdvancedColorButton("XANH L√Å", new Color(39, 174, 96), Color.WHITE, "‚ô£");
        JButton blueButton = createAdvancedColorButton("XANH D∆Ø∆†NG", new Color(52, 152, 219), Color.WHITE, "‚ô†");
        JButton yellowButton = createAdvancedColorButton("V√ÄNG", new Color(241, 196, 15), Color.BLACK, "‚òÖ");
        
        colorGrid.add(redButton);
        colorGrid.add(greenButton);
        colorGrid.add(blueButton);
        colorGrid.add(yellowButton);
        
        // T·∫°o h√¨nh ·∫£nh hi·ªÉn th·ªã preview c·ªßa l√° b√†i wild v·ªõi m√†u ƒë√£ ch·ªçn
        JLabel previewLabel = new JLabel("", SwingConstants.CENTER);
        previewLabel.setPreferredSize(new Dimension(100, 30));
        previewLabel.setFont(new Font("Arial", Font.BOLD, 14));
        previewLabel.setForeground(new Color(90, 95, 207));
        previewLabel.setText("Ch·ªçn m·ªôt m√†u...");
        
        mainPanel.add(headerPanel, BorderLayout.NORTH);
        mainPanel.add(colorGrid, BorderLayout.CENTER);
        mainPanel.add(previewLabel, BorderLayout.SOUTH);
        
        final CardColor[] selectedColor = {null};
        
        // Add action listeners v·ªõi hi·ªáu ·ª©ng
        redButton.addActionListener(e -> {
            selectedColor[0] = CardColor.RED;
            previewLabel.setText("ƒê√£ ch·ªçn: ƒê·ªé");
            previewLabel.setForeground(new Color(231, 76, 60));
            
            Timer timer = new Timer(800, evt -> {
                Window window = SwingUtilities.getWindowAncestor(mainPanel);
                window.dispose();
            });
            timer.setRepeats(false);
            timer.start();
        });
        
        greenButton.addActionListener(e -> {
            selectedColor[0] = CardColor.GREEN;
            previewLabel.setText("ƒê√£ ch·ªçn: XANH L√Å");
            previewLabel.setForeground(new Color(39, 174, 96));
            
            Timer timer = new Timer(800, evt -> {
                Window window = SwingUtilities.getWindowAncestor(mainPanel);
                window.dispose();
            });
            timer.setRepeats(false);
            timer.start();
        });
        
        blueButton.addActionListener(e -> {
            selectedColor[0] = CardColor.BLUE;
            previewLabel.setText("ƒê√£ ch·ªçn: XANH D∆Ø∆†NG");
            previewLabel.setForeground(new Color(52, 152, 219));
            
            Timer timer = new Timer(800, evt -> {
                Window window = SwingUtilities.getWindowAncestor(mainPanel);
                window.dispose();
            });
            timer.setRepeats(false);
            timer.start();
        });
        
        yellowButton.addActionListener(e -> {
            selectedColor[0] = CardColor.YELLOW;
            previewLabel.setText("ƒê√£ ch·ªçn: V√ÄNG");
            previewLabel.setForeground(new Color(241, 196, 15));
            
            Timer timer = new Timer(800, evt -> {
                Window window = SwingUtilities.getWindowAncestor(mainPanel);
                window.dispose();
            });
            timer.setRepeats(false);
            timer.start();
        });
        
        // T·∫°o dialog hi·ªán ƒë·∫°i
        JDialog dialog = new JDialog(this, "Ch·ªçn m√†u", true);
        dialog.setContentPane(mainPanel);
        dialog.setResizable(false);
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
        
        return selectedColor[0];
    }
    
    /**
     * T·∫°o n√∫t m√†u s·∫Øc n√¢ng cao cho dialog ch·ªçn m√†u
     * 
     * @param text VƒÉn b·∫£n tr√™n n√∫t
     * @param bgColor M√†u n·ªÅn
     * @param textColor M√†u ch·ªØ
     * @param symbol Bi·ªÉu t∆∞·ª£ng ƒë·∫°i di·ªán
     * @return N√∫t m√†u ƒë√£ t·∫°o
     */
    private JButton createAdvancedColorButton(String text, Color bgColor, Color textColor, String symbol) {
        JButton button = new JButton() {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                
                // V·∫Ω background v·ªõi hi·ªáu ·ª©ng gradient
                GradientPaint gradient;
                if (getModel().isPressed()) {
                    gradient = new GradientPaint(
                        0, 0, bgColor.darker(), 
                        0, getHeight(), bgColor
                    );
                } else if (getModel().isRollover()) {
                    gradient = new GradientPaint(
                        0, 0, bgColor, 
                        0, getHeight(), bgColor.brighter()
                    );
                } else {
                    gradient = new GradientPaint(
                        0, 0, bgColor, 
                        0, getHeight(), bgColor.darker()
                    );
                }
                
                g2.setPaint(gradient);
                g2.fillRoundRect(0, 0, getWidth(), getHeight(), 15, 15);
                
                // V·∫Ω vi·ªÅn s√°ng
                g2.setColor(new Color(255, 255, 255, 50));
                g2.drawRoundRect(0, 0, getWidth()-1, getHeight()-1, 15, 15);
                
                // V·∫Ω hi·ªáu ·ª©ng highlight
                if (getModel().isRollover()) {
                    g2.setColor(new Color(255, 255, 255, 30));
                    g2.fillRoundRect(3, 3, getWidth()-6, 20, 10, 10);
                }
                
                // V·∫Ω text
                g2.setColor(textColor);
                g2.setFont(new Font("Arial", Font.BOLD, 16));
                FontMetrics fm = g2.getFontMetrics();
                int textWidth = fm.stringWidth(text);
                int x = (getWidth() - textWidth) / 2;
                int y = getHeight() / 2 + 15;
                g2.drawString(text, x, y);
                
                // V·∫Ω symbol
                g2.setFont(new Font("Arial", Font.BOLD, 28));
                FontMetrics fmSymbol = g2.getFontMetrics();
                int symbolWidth = fmSymbol.stringWidth(symbol);
                int symbolX = (getWidth() - symbolWidth) / 2;
                int symbolY = getHeight() / 2 - 10;
                g2.drawString(symbol, symbolX, symbolY);
                
                g2.dispose();
            }
        };
        
        button.setPreferredSize(new Dimension(140, 90));
        button.setBorderPainted(false);
        button.setFocusPainted(false);
        button.setContentAreaFilled(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        
        return button;
    }
    
    /**
     * Th√™m tin nh·∫Øn v√†o khu v·ª±c chat v·ªõi ƒë·ªãnh d·∫°ng c·∫£i ti·∫øn
     * 
     * @param message Tin nh·∫Øn
     */
    public void addChatMessage(String message) {
        // Th√™m timestamp cho m·ªói tin nh·∫Øn
        String timestamp = new java.text.SimpleDateFormat("HH:mm").format(new java.util.Date());
        String formattedMessage = "[" + timestamp + "] " + message + "\n";
        
        // Th√™m tin nh·∫Øn v√† t·ª± ƒë·ªông cu·ªôn xu·ªëng
        chatArea.append(formattedMessage);
        chatArea.setCaretPosition(chatArea.getDocument().getLength());
        
        // Hi·ªÉn th·ªã toast notification cho tin nh·∫Øn m·ªõi t·ª´ ng∆∞·ªùi ch∆°i kh√°c
        if (message.contains(":") && !message.startsWith("B·∫°n:")) {
            String username = message.substring(0, message.indexOf(":"));
            String content = message.substring(message.indexOf(":") + 1).trim();
            if (!content.isEmpty()) {
                showToast(username + " ƒë√£ g·ª≠i tin nh·∫Øn", "info");
            }
        }
    }
    
    /**
     * Hi·ªÉn th·ªã th√¥ng b√°o toast cho c√°c s·ª± ki·ªán quan tr·ªçng
     * 
     * @param message N·ªôi dung th√¥ng b√°o
     * @param type Lo·∫°i th√¥ng b√°o (info, warning, error, success)
     */
    public void showToast(String message, String type) {
        // T·∫°o JPanel cho toast notification v·ªõi hi·ªáu ·ª©ng cao c·∫•p
        JPanel toastPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                
                // V·∫Ω background v·ªõi g√≥c bo tr√≤n
                g2.setColor(getBackground());
                g2.fillRoundRect(0, 0, getWidth(), getHeight(), 20, 20);
                
                // Th√™m hi·ªáu ·ª©ng gradient nh·∫π
                Paint oldPaint = g2.getPaint();
                g2.setPaint(new GradientPaint(0, 0, new Color(255, 255, 255, 50), 
                                             0, getHeight(), new Color(0, 0, 0, 30)));
                g2.fillRoundRect(0, 0, getWidth(), getHeight(), 20, 20);
                g2.setPaint(oldPaint);
                
                g2.dispose();
            }
        };
        toastPanel.setLayout(new BorderLayout());
        
        // Ch·ªçn m√†u background theo lo·∫°i th√¥ng b√°o
        Color bgColor;
        String iconText;
        switch (type) {
            case "success":
                bgColor = new Color(39, 174, 96); // UNO Green
                iconText = "‚úì ";
                break;
            case "error":
                bgColor = new Color(231, 76, 60); // UNO Red
                iconText = "‚úó ";
                break;
            case "warning":
                bgColor = new Color(241, 196, 15); // UNO Yellow
                iconText = "‚ö† ";
                break;
            default: // info
                bgColor = new Color(90, 95, 207); // UI Accent color
                iconText = "‚Ñπ ";
                break;
        }
        
        // T·∫°o icon panel ri√™ng bi·ªát v·ªõi hi·ªáu ·ª©ng
        JPanel iconPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        iconPanel.setOpaque(false);
        
        JLabel iconLabel = new JLabel(iconText);
        iconLabel.setFont(new Font("Arial", Font.BOLD, 18));
        iconLabel.setForeground(Color.WHITE);
        iconPanel.add(iconLabel);
        
        // T·∫°o label v·ªõi th√¥ng b√°o
        JLabel toastLabel = new JLabel(message);
        toastLabel.setForeground(Color.WHITE);
        toastLabel.setFont(new Font("Arial", Font.BOLD, 14));
        toastLabel.setBorder(BorderFactory.createEmptyBorder(10, 5, 10, 20));
        
        toastPanel.add(iconPanel, BorderLayout.WEST);
        toastPanel.add(toastLabel, BorderLayout.CENTER);
        toastPanel.setBackground(bgColor);
        
        // Th√™m hi·ªáu ·ª©ng ƒë·ªï b√≥ng
        toastPanel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createEmptyBorder(5, 5, 10, 5), // Margin cho ƒë·ªï b√≥ng
            BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(255, 255, 255, 100), 1),
                BorderFactory.createEmptyBorder(3, 10, 3, 3)
            )
        ));
        
        // Panel ƒë·ªï b√≥ng ch√≠nh
        JPanel shadowPanel = new JPanel(new BorderLayout()) {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                
                // V·∫Ω ƒë·ªï b√≥ng
                g2.setColor(new Color(0, 0, 0, 30));
                g2.fillRoundRect(5, 5, getWidth() - 8, getHeight() - 8, 20, 20);
                
                g2.dispose();
                super.paintComponent(g);
            }
        };
        shadowPanel.setOpaque(false);
        shadowPanel.add(toastPanel, BorderLayout.CENTER);
        
        // ƒê·∫∑t v·ªã tr√≠ c·ªßa toast ·ªü ph√≠a d∆∞·ªõi trung t√¢m m√†n h√¨nh
        final JWindow toastWindow = new JWindow();
        toastWindow.setBackground(new Color(0, 0, 0, 0)); // Transparent
        toastWindow.setContentPane(shadowPanel);
        toastWindow.pack();
        
        // V·ªã tr√≠ theo thi·∫øt k·∫ø - ph√≠a tr√™n b√™n ph·∫£i
        int x = getX() + getWidth() - toastWindow.getWidth() - 20;
        int y = getY() + 80; // Kho·∫£ng c√°ch t·ª´ ƒë·∫ßu m√†n h√¨nh
        
        toastWindow.setLocation(x, y);
        
        // Hi·ªáu ·ª©ng animation hi·ªÉn th·ªã
        toastWindow.setOpacity(0.0f);
        toastWindow.setVisible(true);
        
        // Hi·ªáu ·ª©ng fade in
        Timer fadeInTimer = new Timer(20, null);
        final float[] opacity = {0.0f};
        
        fadeInTimer.addActionListener(e -> {
            opacity[0] += 0.1f;
            if (opacity[0] > 1.0f) {
                opacity[0] = 1.0f;
                fadeInTimer.stop();
                
                // Sau khi hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß, ƒë·ª£i 3s r·ªìi fade out
                new Timer(3000, evt -> {
                    // Hi·ªáu ·ª©ng fade out
                    Timer fadeOutTimer = new Timer(20, null);
                    fadeOutTimer.addActionListener(evt2 -> {
                        opacity[0] -= 0.1f;
                        if (opacity[0] < 0.0f) {
                            opacity[0] = 0.0f;
                            fadeOutTimer.stop();
                            toastWindow.dispose();
                        } else {
                            toastWindow.setOpacity(opacity[0]);
                        }
                    });
                    fadeOutTimer.start();
                }).start();
            } else {
                toastWindow.setOpacity(opacity[0]);
            }
        });
        fadeInTimer.start();
    }
    
    /**
     * Hi·ªÉn th·ªã th√¥ng b√°o toast v·ªõi th·ªùi gian t√πy ch·ªânh
     * 
     * @param message N·ªôi dung th√¥ng b√°o
     * @param type Lo·∫°i th√¥ng b√°o (info, warning, error, success)
     * @param durationMs Th·ªùi gian hi·ªÉn th·ªã (mili gi√¢y)
     */
    public void showToast(String message, String type, int durationMs) {
        // T·∫°o JPanel cho toast notification v·ªõi hi·ªáu ·ª©ng cao c·∫•p
        JPanel toastPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                
                // V·∫Ω background v·ªõi g√≥c bo tr√≤n
                g2.setColor(getBackground());
                g2.fillRoundRect(0, 0, getWidth(), getHeight(), 20, 20);
                
                // Th√™m hi·ªáu ·ª©ng gradient nh·∫π
                Paint oldPaint = g2.getPaint();
                g2.setPaint(new GradientPaint(0, 0, new Color(255, 255, 255, 50), 
                                             0, getHeight(), new Color(0, 0, 0, 30)));
                g2.fillRoundRect(0, 0, getWidth(), getHeight(), 20, 20);
                g2.setPaint(oldPaint);
                
                g2.dispose();
            }
        };
        toastPanel.setLayout(new BorderLayout());
        
        // Ch·ªçn m√†u background theo lo·∫°i th√¥ng b√°o
        Color bgColor;
        String iconText;
        switch (type) {
            case "success":
                bgColor = new Color(39, 174, 96); // UNO Green
                iconText = "‚úì ";
                break;
            case "error":
                bgColor = new Color(231, 76, 60); // UNO Red
                iconText = "‚úó ";
                break;
            case "warning":
                bgColor = new Color(241, 196, 15); // UNO Yellow
                iconText = "‚ö† ";
                break;
            default: // info
                bgColor = new Color(90, 95, 207); // UI Accent color
                iconText = "‚Ñπ ";
                break;
        }
        
        // T·∫°o icon panel ri√™ng bi·ªát v·ªõi hi·ªáu ·ª©ng
        JPanel iconPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        iconPanel.setOpaque(false);
        
        JLabel iconLabel = new JLabel(iconText);
        iconLabel.setFont(new Font("Arial", Font.BOLD, 18));
        iconLabel.setForeground(Color.WHITE);
        iconPanel.add(iconLabel);
        
        // T·∫°o label v·ªõi th√¥ng b√°o
        JLabel toastLabel = new JLabel(message);
        toastLabel.setForeground(Color.WHITE);
        toastLabel.setFont(new Font("Arial", Font.BOLD, 14));
        toastLabel.setBorder(BorderFactory.createEmptyBorder(10, 5, 10, 20));
        
        toastPanel.add(iconPanel, BorderLayout.WEST);
        toastPanel.add(toastLabel, BorderLayout.CENTER);
        toastPanel.setBackground(bgColor);
        
        // Th√™m hi·ªáu ·ª©ng ƒë·ªï b√≥ng
        toastPanel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createEmptyBorder(5, 5, 10, 5), // Margin cho ƒë·ªï b√≥ng
            BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(255, 255, 255, 100), 1),
                BorderFactory.createEmptyBorder(3, 10, 3, 3)
            )
        ));
        
        // Panel ƒë·ªï b√≥ng ch√≠nh
        JPanel shadowPanel = new JPanel(new BorderLayout()) {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                
                // V·∫Ω ƒë·ªï b√≥ng
                g2.setColor(new Color(0, 0, 0, 30));
                g2.fillRoundRect(5, 5, getWidth() - 8, getHeight() - 8, 20, 20);
                
                g2.dispose();
                super.paintComponent(g);
            }
        };
        shadowPanel.setOpaque(false);
        shadowPanel.add(toastPanel, BorderLayout.CENTER);
        
        // ƒê·∫∑t v·ªã tr√≠ c·ªßa toast ·ªü ph√≠a d∆∞·ªõi trung t√¢m m√†n h√¨nh
        final JWindow toastWindow = new JWindow();
        toastWindow.setBackground(new Color(0, 0, 0, 0)); // Transparent
        toastWindow.setContentPane(shadowPanel);
        toastWindow.pack();
        
        // V·ªã tr√≠ theo thi·∫øt k·∫ø - ph√≠a tr√™n b√™n ph·∫£i
        int x = getX() + getWidth() - toastWindow.getWidth() - 20;
        int y = getY() + 80; // Kho·∫£ng c√°ch t·ª´ ƒë·∫ßu m√†n h√¨nh
        
        toastWindow.setLocation(x, y);
        
        // Hi·ªáu ·ª©ng animation hi·ªÉn th·ªã
        toastWindow.setOpacity(0.0f);
        toastWindow.setVisible(true);
        
        // Hi·ªáu ·ª©ng fade in
        Timer fadeInTimer2 = new Timer(20, null);
        final float[] opacity2 = {0.0f};
        
        fadeInTimer2.addActionListener(e -> {
            opacity2[0] += 0.1f;
            if (opacity2[0] > 1.0f) {
                opacity2[0] = 1.0f;
                fadeInTimer2.stop();
                
                // Sau khi hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß, ƒë·ª£i th·ªùi gian ch·ªâ ƒë·ªãnh r·ªìi fade out
                new Timer(durationMs, evt -> {
                    // Hi·ªáu ·ª©ng fade out
                    Timer fadeOutTimer = new Timer(20, null);
                    fadeOutTimer.addActionListener(evt2 -> {
                        opacity2[0] -= 0.1f;
                        if (opacity2[0] < 0.0f) {
                            opacity2[0] = 0.0f;
                            fadeOutTimer.stop();
                            toastWindow.dispose();
                        } else {
                            toastWindow.setOpacity(opacity2[0]);
                        }
                    });
                    fadeOutTimer.start();
                }).start();
            } else {
                toastWindow.setOpacity(opacity2[0]);
            }
        });
        fadeInTimer2.start();
        
        // Di chuy·ªÉn toast xu·ªëng ph√≠a d∆∞·ªõi
        Point toastLocation = toastWindow.getLocation();
        toastWindow.setLocation(toastLocation.x, toastLocation.y + 200);
        
        // Hi·ªÉn th·ªã toast
        toastWindow.setVisible(true);
        
        // Animation fade in
        Timer fadeInTimer = new Timer(20, null);
        final float[] opacity = {0.0f};
        
        fadeInTimer.addActionListener(e -> {
            opacity[0] += 0.05f;
            if (opacity[0] > 1.0f) {
                opacity[0] = 1.0f;
                fadeInTimer.stop();
                
                // Sau khi hi·ªÉn th·ªã m·ªôt th·ªùi gian, th√¨ fade out
                new Timer(3000, evt -> {
                    Timer fadeOutTimer = new Timer(20, null);
                    fadeOutTimer.addActionListener(fadeOutEvent -> {
                        opacity[0] -= 0.05f;
                        if (opacity[0] < 0.0f) {
                            opacity[0] = 0.0f;
                            fadeOutTimer.stop();
                            toastWindow.dispose();
                        } else {
                            toastWindow.setOpacity(opacity[0]);
                        }
                    });
                    fadeOutTimer.start();
                }).start();
            } else {
                toastWindow.setOpacity(opacity[0]);
            }
        });
        
        fadeInTimer.start();
    }
    
    /**
     * Creates a clean, modern button with consistent styling
     */
    /**
     * T·∫°o n√∫t v·ªõi thi·∫øt k·∫ø hi·ªán ƒë·∫°i, bo tr√≤n v√† hi·ªáu ·ª©ng hover
     */
    private JButton createCleanButton(String text, Color backgroundColor, Color textColor) {
        JButton button = new JButton(text);
        button.setFont(new Font("Arial", Font.BOLD, 13));
        button.setPreferredSize(new Dimension(130, 40));
        button.setBackground(backgroundColor);
        button.setForeground(textColor);
        
        // T·∫°o vi·ªÅn bo tr√≤n v√† ƒë·ªám
        button.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(backgroundColor.darker(), 1),
            BorderFactory.createEmptyBorder(8, 16, 8, 16)
        ));
        
        button.setFocusPainted(false);
        button.setBorderPainted(true);
        button.setOpaque(true);
        
        // T√πy ch·ªânh giao di·ªán n√∫t
        button.setUI(new javax.swing.plaf.basic.BasicButtonUI() {
            @Override
            public void paint(Graphics g, JComponent c) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                
                AbstractButton b = (AbstractButton) c;
                ButtonModel model = b.getModel();
                
                int width = c.getWidth();
                int height = c.getHeight();
                
                // Gradient background
                GradientPaint gradient;
                if (model.isPressed()) {
                    gradient = new GradientPaint(0, 0, backgroundColor.darker(), 0, height, backgroundColor);
                } else {
                    gradient = new GradientPaint(0, 0, backgroundColor, 0, height, backgroundColor.darker());
                }
                
                g2.setPaint(gradient);
                g2.fillRoundRect(0, 0, width - 1, height - 1, 12, 12);
                
                // Draw border
                g2.setColor(model.isPressed() ? backgroundColor.darker().darker() : backgroundColor.darker());
                g2.drawRoundRect(0, 0, width - 1, height - 1, 12, 12);
                
                // Add subtle highlight at top (3D effect)
                if (!model.isPressed()) {
                    g2.setColor(new Color(255, 255, 255, 50));
                    g2.drawLine(3, 3, width - 4, 3);
                }
                
                g2.dispose();
                super.paint(g, c);
            }
        });
        
        // Hi·ªáu ·ª©ng hover
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (button.isEnabled()) {
                    button.setBackground(backgroundColor.darker());
                    button.setCursor(new Cursor(Cursor.HAND_CURSOR));
                }
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button.setBackground(backgroundColor);
                button.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });
        
        return button;
    }
}
